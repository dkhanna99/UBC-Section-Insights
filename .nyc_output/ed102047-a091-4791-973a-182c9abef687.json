{"/Users/zaidattar/IdeaProjects/project_team134/src/controller/IInsightFacade.ts":{"path":"/Users/zaidattar/IdeaProjects/project_team134/src/controller/IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":45,"6":45,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":45,"2":1,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/zaidattar/IdeaProjects/project_team134/src/controller/IInsightFacade.ts","sources":["/Users/zaidattar/IdeaProjects/project_team134/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface InsightResult {\n\t[key: string]: string | number;\n}\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1c857b1415120f5b5d5dd5513b7f3ff1188edb5e","contentHash":"f798cf1741a684991e99c28cee6cce150b0d8910e044eacf6c4bd9809ad1b98e"},"/Users/zaidattar/IdeaProjects/project_team134/src/controller/InsightFacade.ts":{"path":"/Users/zaidattar/IdeaProjects/project_team134/src/controller/InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":18},"end":{"line":7,"column":45}},"5":{"start":{"line":8,"column":27},"end":{"line":8,"column":65}},"6":{"start":{"line":9,"column":19},"end":{"line":9,"column":55}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":49}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":34}},"9":{"start":{"line":16,"column":8},"end":{"line":18,"column":11}},"10":{"start":{"line":17,"column":12},"end":{"line":17,"column":71}},"11":{"start":{"line":21,"column":8},"end":{"line":21,"column":53}},"12":{"start":{"line":22,"column":22},"end":{"line":22,"column":64}},"13":{"start":{"line":23,"column":29},"end":{"line":33,"column":10}},"14":{"start":{"line":24,"column":12},"end":{"line":32,"column":13}},"15":{"start":{"line":25,"column":33},"end":{"line":25,"column":49}},"16":{"start":{"line":26,"column":39},"end":{"line":26,"column":90}},"17":{"start":{"line":27,"column":32},"end":{"line":27,"column":88}},"18":{"start":{"line":28,"column":16},"end":{"line":28,"column":60}},"19":{"start":{"line":31,"column":16},"end":{"line":31,"column":82}},"20":{"start":{"line":34,"column":8},"end":{"line":34,"column":40}},"21":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"22":{"start":{"line":38,"column":12},"end":{"line":38,"column":66}},"23":{"start":{"line":40,"column":8},"end":{"line":40,"column":34}},"24":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"25":{"start":{"line":42,"column":12},"end":{"line":42,"column":93}},"26":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"27":{"start":{"line":45,"column":12},"end":{"line":45,"column":78}},"28":{"start":{"line":47,"column":8},"end":{"line":54,"column":9}},"29":{"start":{"line":48,"column":28},"end":{"line":48,"column":103}},"30":{"start":{"line":49,"column":12},"end":{"line":49,"column":43}},"31":{"start":{"line":50,"column":12},"end":{"line":50,"column":52}},"32":{"start":{"line":53,"column":12},"end":{"line":53,"column":87}},"33":{"start":{"line":57,"column":8},"end":{"line":57,"column":34}},"34":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"35":{"start":{"line":59,"column":12},"end":{"line":59,"column":83}},"36":{"start":{"line":61,"column":8},"end":{"line":61,"column":42}},"37":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"38":{"start":{"line":63,"column":12},"end":{"line":63,"column":110}},"39":{"start":{"line":65,"column":8},"end":{"line":76,"column":9}},"40":{"start":{"line":66,"column":12},"end":{"line":66,"column":37}},"41":{"start":{"line":67,"column":12},"end":{"line":67,"column":44}},"42":{"start":{"line":68,"column":32},"end":{"line":68,"column":51}},"43":{"start":{"line":69,"column":12},"end":{"line":69,"column":57}},"44":{"start":{"line":70,"column":12},"end":{"line":70,"column":28}},"45":{"start":{"line":71,"column":12},"end":{"line":71,"column":22}},"46":{"start":{"line":74,"column":12},"end":{"line":74,"column":62}},"47":{"start":{"line":75,"column":12},"end":{"line":75,"column":88}},"48":{"start":{"line":79,"column":8},"end":{"line":79,"column":62}},"49":{"start":{"line":82,"column":8},"end":{"line":82,"column":60}},"50":{"start":{"line":85,"column":8},"end":{"line":85,"column":28}},"51":{"start":{"line":88,"column":8},"end":{"line":88,"column":50}},"52":{"start":{"line":91,"column":8},"end":{"line":91,"column":34}},"53":{"start":{"line":92,"column":32},"end":{"line":92,"column":34}},"54":{"start":{"line":93,"column":8},"end":{"line":100,"column":11}},"55":{"start":{"line":94,"column":35},"end":{"line":98,"column":13}},"56":{"start":{"line":99,"column":12},"end":{"line":99,"column":49}},"57":{"start":{"line":101,"column":8},"end":{"line":101,"column":48}},"58":{"start":{"line":104,"column":0},"end":{"line":104,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":18},"end":{"line":19,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":64},"end":{"line":16,"column":65}},"loc":{"start":{"line":16,"column":75},"end":{"line":18,"column":9}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":33},"end":{"line":35,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":23,"column":39},"end":{"line":23,"column":40}},"loc":{"start":{"line":23,"column":55},"end":{"line":33,"column":9}},"line":23},"5":{"name":"(anonymous_5)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":40},"end":{"line":55,"column":5}},"line":36},"6":{"name":"(anonymous_6)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":28},"end":{"line":77,"column":5}},"line":56},"7":{"name":"(anonymous_7)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":36},"end":{"line":80,"column":5}},"line":78},"8":{"name":"(anonymous_8)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":30},"end":{"line":83,"column":5}},"line":81},"9":{"name":"(anonymous_9)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":30},"end":{"line":86,"column":5}},"line":84},"10":{"name":"(anonymous_10)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":30},"end":{"line":89,"column":5}},"line":87},"11":{"name":"(anonymous_11)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":25},"end":{"line":102,"column":5}},"line":90},"12":{"name":"(anonymous_12)","decl":{"start":{"line":93,"column":30},"end":{"line":93,"column":31}},"loc":{"start":{"line":93,"column":47},"end":{"line":100,"column":9}},"line":93}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},{"start":{"line":37,"column":8},"end":{"line":39,"column":9}}],"line":37},"4":{"loc":{"start":{"line":37,"column":12},"end":{"line":37,"column":61}},"type":"binary-expr","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":15}},{"start":{"line":37,"column":19},"end":{"line":37,"column":41}},{"start":{"line":37,"column":45},"end":{"line":37,"column":61}}],"line":37},"5":{"loc":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},{"start":{"line":41,"column":8},"end":{"line":43,"column":9}}],"line":41},"6":{"loc":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},{"start":{"line":44,"column":8},"end":{"line":46,"column":9}}],"line":44},"7":{"loc":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},{"start":{"line":58,"column":8},"end":{"line":60,"column":9}}],"line":58},"8":{"loc":{"start":{"line":58,"column":12},"end":{"line":58,"column":55}},"type":"binary-expr","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":15}},{"start":{"line":58,"column":19},"end":{"line":58,"column":35}},{"start":{"line":58,"column":39},"end":{"line":58,"column":55}}],"line":58},"9":{"loc":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},{"start":{"line":62,"column":8},"end":{"line":64,"column":9}}],"line":62},"10":{"loc":{"start":{"line":79,"column":15},"end":{"line":79,"column":61}},"type":"binary-expr","locations":[{"start":{"line":79,"column":15},"end":{"line":79,"column":28}},{"start":{"line":79,"column":32},"end":{"line":79,"column":44}},{"start":{"line":79,"column":48},"end":{"line":79,"column":61}}],"line":79},"11":{"loc":{"start":{"line":82,"column":15},"end":{"line":82,"column":59}},"type":"binary-expr","locations":[{"start":{"line":82,"column":15},"end":{"line":82,"column":27}},{"start":{"line":82,"column":31},"end":{"line":82,"column":43}},{"start":{"line":82,"column":47},"end":{"line":82,"column":59}}],"line":82}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":63,"8":63,"9":63,"10":0,"11":63,"12":63,"13":63,"14":56,"15":56,"16":56,"17":56,"18":55,"19":1,"20":63,"21":31,"22":4,"23":27,"24":27,"25":1,"26":26,"27":1,"28":25,"29":25,"30":11,"31":11,"32":14,"33":4,"34":4,"35":2,"36":2,"37":2,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":28,"52":5,"53":5,"54":5,"55":3,"56":3,"57":5,"58":1},"f":{"0":1,"1":63,"2":0,"3":63,"4":56,"5":31,"6":4,"7":0,"8":0,"9":0,"10":28,"11":5,"12":3},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[4,27],"4":[31,29,28],"5":[1,26],"6":[1,25],"7":[2,2],"8":[4,4,3],"9":[1,1],"10":[0,0,0],"11":[0,0,0]},"inputSourceMap":{"version":3,"file":"/Users/zaidattar/IdeaProjects/project_team134/src/controller/InsightFacade.ts","sources":["/Users/zaidattar/IdeaProjects/project_team134/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError\n} from \"./IInsightFacade\";\nimport {Dataset} from \"../model/Dataset\";\nimport {DatasetProcessor} from \"../service/DatasetProcessor\";\nimport fs from \"fs-extra\";\nimport {assert} from \"console\";\nimport {\n\tSectionQuery, SectionQueryNumericalKeyList,\n\tSectionQueryNumericalKeys, SectionQueryStringKeyList, SectionQueryStringKeys\n} from \"../model/CourseSection\";\n\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\n\n//\tTO DO\n//\tuse fs to read and write to file, you dont need to store anything locally?\n//\thelper method to validate and check if its json, and anything else before you add\n// \tfs extra saving and loading to and from disk ALSO removeDataSet\n// \tlistdataset doesn't need fs extra, you should save sections as an object\n// \tcreate a list of datasets\n//\tDual representation both NEED TO BE UP TO DATE IN REMOVEDATASET AND ADDDATASET\n//\tlist of datasets here(private variable data) and one in the disk\n//\tto check for duplicates, check list of datasets\nexport default class InsightFacade implements IInsightFacade {\n\tprivate datasets: Map<string,Dataset>;\n\tprivate datasetsLoaded;\n\tconstructor() {\n\t\tconsole.log(\"InsightFacadeImpl::init()\");\n\t\tthis.datasets = new Map();\n\t\tthis.datasetsLoaded = this.loadDatasetsFromDisk().catch((error) => {\n\t\t\tconsole.error(\"Failed to load datasets from disk:\", error);\n\t\t});\n\t}\n\n\t//\ttest method and make sure it loads after new instance.\n\t//\ttry this as a loop\n\t// private async loadDatasetsFromDisk(): Promise<void> {\n\t// \ttry {\n\t// \t\tawait fs.ensureDir(\"./data\");\n\t// \t\tconst files = await fs.readdir(\"./data\"); // Get a list of dataset files\n\t// \t\tconst loadPromises = files.map(async (file) => {\n\t// \t\t\tconst filePath = `./data/${file}`;\n\t// \t\t\tconst datasetJsonStr = await fs.readFile(filePath, \"utf8\");\n\t// \t\t\tconst dataset = JSON.parse(datasetJsonStr);\n\t// \t\t\tthis.datasets.set(dataset.id, dataset);\n\t// \t\t\t// console.log(dataset);\n\t// \t\t\t// console.log(`Loading dataset with id: ${dataset.id}`);\n\t// \t\t});\n\t// \t\tawait Promise.all(loadPromises);\n\t// \t} catch (error) {\n\t// \t\tconsole.error(\"Failed to load datasets from disk:\", error);\n\t// \t\t//\tskip it if isn't a valid file\n\t// \t\treturn;\n\t// \t}\n\t// }\n\n\tprivate async loadDatasetsFromDisk(): Promise<void> {\n\t\tawait fs.ensureDir(\"./data\");\n\t\tconst files = await fs.readdir(\"./data\"); // Get a list of dataset files\n\t\tconst loadPromises = files.map(async (file) => {\n\t\t\ttry {\n\t\t\t\tconst filePath = `./data/${file}`;\n\t\t\t\tconst datasetJsonStr = await fs.readFile(filePath, \"utf8\");\n\t\t\t\t// const dataset = JSON.parse(datasetJsonStr);\n\t\t\t\t// this.datasets.set(dataset.id, dataset);\n\t\t\t\tconst dataset = Dataset.fromObject(JSON.parse(datasetJsonStr));\n\t\t\t\tthis.datasets.set(dataset.getID(), dataset);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Failed to load dataset from file ${file}:`, error);\n\t\t\t\t// Skip this file and continue with the rest\n\t\t\t}\n\t\t});\n\t\tawait Promise.all(loadPromises);\n\t}\n\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\tif (!id || id.trim().length === 0 || id.includes(\"_\")) {\n\t\t\tthrow new InsightError(\"Invalid ID\");\n\t\t}\n\t\tconsole.log(\"checked id\");\n\t\tif(kind !== InsightDatasetKind.Sections){\n\t\t\treturn Promise.reject(new InsightError(\"Invalid Dataset Kind\"));\n\t\t}\n\t\tif(this.datasets.has(id)){\n\t\t\tthrow new InsightError(\"Dataset already exists\");\n\t\t}\n\t\ttry{\n\t\t\tconst dataset = await DatasetProcessor.ProcessDataset(id,content,kind);\n\t\t\tthis.datasets.set(id,dataset);\n\n\t\t\treturn Array.from(this.datasets.keys());\n\t\t} catch(error){\n\t\t\tthrow new InsightError(`Failed to add dataset: ${error}`);\n\t\t}\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\tawait this.datasetsLoaded;\n\t\tif (!id || /^\\s*$/.test(id) || id.includes(\"_\")) {\n\t\t\treturn Promise.reject(new InsightError(\"Invalid ID\"));\n\t\t}\n\t\t//\thas method might be wrong too\n\t\t//\tmaybe loading when writing new instance is wrong.\n\t\tconsole.log(this.datasets.keys());\n\t\tif (!this.datasets.has(id)) {\n\t\t\treturn Promise.reject(new NotFoundError(`Dataset with id ${id} does not exist`));\n\t\t}\n\t\ttry {\n\t\t\tthis.datasets.delete(id);\n\t\t\tconsole.log(\"deleted from map\");\n\t\t\tconst datasetPath = `./data/${id}.json`;\n\t\t\tawait fs.remove(datasetPath);\n\t\t\tconsole.log(id);\n\n\t\t\treturn id;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Failed to remove dataset:\", error);\n\t\t\tthrow new InsightError(`Error removing dataset: ${error}`);\n\t\t}\n\t}\n\n\tprivate static isLogicalComparison(key: string): boolean {\n\t\treturn key === \"AND\" || key === \"OR\" || key === \"NOT\";\n\t}\n\n\tprivate static isMComparison(key: string): boolean {\n\t\treturn key === \"GT\" || key === \"LT\" || key === \"EQ\";\n\t}\n\n\tprivate static isSComparison(key: string): boolean {\n\t\treturn key === \"IS\";\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\t// // validation that query is valid (everything except WHERE clause)\n\t\t// const validQuery = query as {WHERE: object};\n\t\t// // load data from disk (hopefully it has already been parsed by addDataset)\n\t\t// const allSections: SectionQuery[] = [];\n\t\t// // generation of the filter function\n\t\t// const datasetName = \"courses\";\n\t\t// const queryFilterFunc = InsightFacade.generateQueryFunction(validQuery.WHERE, datasetName);\n\t\t// const filteredSections = allSections.filter(queryFilterFunc); // apply filter function\n\t\t// // apply options\n\t\t// // return final result\n\t\treturn Promise.reject(\"Not implemented.\");\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\tawait this.datasetsLoaded;\n\t\tconst insightDatasets: InsightDataset[] = [];\n\n\t\t// Iterate through all datasets in the map\n\t\tthis.datasets.forEach((dataset, id) => {\n\t\t\t// Create an InsightDataset object for each one\n\t\t\tconst insightDataset: InsightDataset = {\n\t\t\t\tid: dataset.getID(),\n\t\t\t\tkind: dataset.getKind(),\n\t\t\t\tnumRows: dataset.getSections().length\n\t\t\t};\n\t\t\tinsightDatasets.push(insightDataset);\n\t\t});\n\t\treturn Promise.resolve(insightDatasets);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bee0854cb00faa441f3d4b8f7bc25a88bce1db88","contentHash":"c92b2884e5e974b22c38202150556955ff5aa0991ac7b7bbceca8068cc6b65aa"},"/Users/zaidattar/IdeaProjects/project_team134/src/model/Dataset.ts":{"path":"/Users/zaidattar/IdeaProjects/project_team134/src/model/Dataset.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}},"2":{"start":{"line":4,"column":24},"end":{"line":4,"column":50}},"3":{"start":{"line":10,"column":8},"end":{"line":10,"column":21}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":25}},"5":{"start":{"line":12,"column":8},"end":{"line":12,"column":27}},"6":{"start":{"line":15,"column":24},"end":{"line":15,"column":53}},"7":{"start":{"line":16,"column":8},"end":{"line":19,"column":11}},"8":{"start":{"line":17,"column":28},"end":{"line":17,"column":236}},"9":{"start":{"line":18,"column":12},"end":{"line":18,"column":40}},"10":{"start":{"line":20,"column":8},"end":{"line":20,"column":23}},"11":{"start":{"line":23,"column":8},"end":{"line":23,"column":25}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":23}},"13":{"start":{"line":29,"column":8},"end":{"line":29,"column":36}},"14":{"start":{"line":32,"column":8},"end":{"line":32,"column":29}},"15":{"start":{"line":35,"column":0},"end":{"line":35,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":26},"end":{"line":13,"column":5}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":27},"end":{"line":21,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":29},"end":{"line":16,"column":30}},"loc":{"start":{"line":16,"column":45},"end":{"line":19,"column":9}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":14},"end":{"line":24,"column":5}},"line":22},"4":{"name":"(anonymous_4)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":12},"end":{"line":27,"column":5}},"line":25},"5":{"name":"(anonymous_5)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":24},"end":{"line":30,"column":5}},"line":28},"6":{"name":"(anonymous_6)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":18},"end":{"line":33,"column":5}},"line":31}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":75,"4":75,"5":75,"6":55,"7":55,"8":3553660,"9":3553660,"10":55,"11":3,"12":58,"13":4264392,"14":23,"15":1},"f":{"0":75,"1":55,"2":3553660,"3":3,"4":58,"5":4264392,"6":23},"b":{},"inputSourceMap":{"version":3,"file":"/Users/zaidattar/IdeaProjects/project_team134/src/model/Dataset.ts","sources":["/Users/zaidattar/IdeaProjects/project_team134/src/model/Dataset.ts"],"names":[],"mappings":";;;AAIA,mDAA8C;AAG9C,MAAa,OAAO;IACX,EAAE,CAAS;IACX,IAAI,CAAqB;IACzB,QAAQ,CAAkB;IAElC,YAAY,EAAU,EAAE,IAAwB;QAC/C,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACpB,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,GAAQ;QAChC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,UAAe,EAAE,EAAE;YACxC,MAAM,OAAO,GAAG,IAAI,6BAAa,CAChC,UAAU,CAAC,IAAI,EACf,UAAU,CAAC,EAAE,EACb,UAAU,CAAC,KAAK,EAChB,UAAU,CAAC,UAAU,EACrB,UAAU,CAAC,IAAI,EACf,UAAU,CAAC,GAAG,EACd,UAAU,CAAC,IAAI,EACf,UAAU,CAAC,IAAI,EACf,UAAU,CAAC,KAAK,EAChB,UAAU,CAAC,IAAI,CACf,CAAC;YACF,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IAChB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,KAAK;QACX,OAAO,IAAI,CAAC,EAAE,CAAC;IAChB,CAAC;IAEM,UAAU,CAAC,OAAsB;QACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAEM,WAAW;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;CACD;AA9CD,0BA8CC","sourcesContent":["\n// import {CourseSection} from \"./CourseSection\";\n\nimport {InsightDatasetKind} from \"../controller/IInsightFacade\";\nimport {CourseSection} from \"./CourseSection\";\n\n\nexport class Dataset {\n\tprivate id: string;\n\tprivate kind: InsightDatasetKind;\n\tprivate sections: CourseSection[];\n\n\tconstructor(id: string, kind: InsightDatasetKind) {\n\t\tthis.id = id;\n\t\tthis.kind = kind;\n\t\tthis.sections = [];\n\t}\n\n\tpublic static fromObject(obj: any): Dataset {\n\t\tconst dataset = new Dataset(obj.id, obj.kind);\n\t\tobj.sections.forEach((sectionObj: any) => {\n\t\t\tconst section = new CourseSection(\n\t\t\t\tsectionObj.uuid,\n\t\t\t\tsectionObj.id,\n\t\t\t\tsectionObj.title,\n\t\t\t\tsectionObj.instructor,\n\t\t\t\tsectionObj.dept,\n\t\t\t\tsectionObj.avg,\n\t\t\t\tsectionObj.pass,\n\t\t\t\tsectionObj.fail,\n\t\t\t\tsectionObj.audit,\n\t\t\t\tsectionObj.year\n\t\t\t);\n\t\t\tdataset.addSection(section);\n\t\t});\n\t\treturn dataset;\n\t}\n\n\tpublic getKind() {\n\t\treturn this.kind;\n\t}\n\n\tpublic getID() {\n\t\treturn this.id;\n\t}\n\n\tpublic addSection(section: CourseSection) {\n\t\tthis.sections.push(section);\n\t}\n\n\tpublic getSections(): CourseSection[] {\n\t\treturn this.sections;\n\t}\n}\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"30508532fce26030890b3335b7294d4f7b3ee3ff","contentHash":"64e6e95d0ec545d84925f16b58ddb60ef03282b3bd81c965f93c361ec4715a5b"},"/Users/zaidattar/IdeaProjects/project_team134/src/model/CourseSection.ts":{"path":"/Users/zaidattar/IdeaProjects/project_team134/src/model/CourseSection.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":106}},"2":{"start":{"line":16,"column":8},"end":{"line":16,"column":44}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":40}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":46}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":56}},"6":{"start":{"line":20,"column":8},"end":{"line":20,"column":44}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":42}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":44}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":44}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":46}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":44}},"12":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"13":{"start":{"line":29,"column":12},"end":{"line":29,"column":33}},"14":{"start":{"line":31,"column":8},"end":{"line":31,"column":21}},"15":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"16":{"start":{"line":35,"column":12},"end":{"line":35,"column":25}},"17":{"start":{"line":37,"column":29},"end":{"line":37,"column":68}},"18":{"start":{"line":38,"column":28},"end":{"line":38,"column":48}},"19":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"20":{"start":{"line":40,"column":12},"end":{"line":40,"column":53}},"21":{"start":{"line":42,"column":8},"end":{"line":42,"column":27}},"22":{"start":{"line":45,"column":0},"end":{"line":45,"column":38}},"23":{"start":{"line":46,"column":0},"end":{"line":46,"column":80}},"24":{"start":{"line":47,"column":0},"end":{"line":47,"column":82}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":81},"end":{"line":26,"column":5}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":24},"end":{"line":32,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":24},"end":{"line":43,"column":5}},"line":33}},"branchMap":{"0":{"loc":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},{"start":{"line":28,"column":8},"end":{"line":30,"column":9}}],"line":28},"1":{"loc":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},{"start":{"line":34,"column":8},"end":{"line":36,"column":9}}],"line":34},"2":{"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},{"start":{"line":39,"column":8},"end":{"line":41,"column":9}}],"line":39}},"s":{"0":1,"1":1,"2":4264392,"3":4264392,"4":4264392,"5":4264392,"6":4264392,"7":4264392,"8":4264392,"9":4264392,"10":4264392,"11":4264392,"12":21321960,"13":3553660,"14":17768300,"15":21321960,"16":17768300,"17":3553660,"18":3553660,"19":3553660,"20":0,"21":3553660,"22":1,"23":1,"24":1},"f":{"0":4264392,"1":21321960,"2":21321960},"b":{"0":[3553660,17768300],"1":[17768300,3553660],"2":[0,3553660]},"inputSourceMap":{"version":3,"file":"/Users/zaidattar/IdeaProjects/project_team134/src/model/CourseSection.ts","sources":["/Users/zaidattar/IdeaProjects/project_team134/src/model/CourseSection.ts"],"names":[],"mappings":";;;AACA,MAAa,aAAa;IACjB,IAAI,CAAS;IACb,EAAE,CAAS;IACX,KAAK,CAAS;IACd,UAAU,CAAS;IACnB,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,IAAI,CAAS;IACb,KAAK,CAAS;IACd,IAAI,CAAS;IAMrB,YACC,IAAY,EACZ,EAAU,EACV,KAAa,EACb,UAAkB,EAClB,IAAY,EACZ,GAAW,EACX,IAAY,EACZ,IAAY,EACZ,KAAa,EACb,IAAY;QAEZ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IASO,YAAY,CAAC,KAAU;QAC9B,IAAG,OAAO,KAAK,KAAK,QAAQ,EAAC;YAC5B,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;SACrB;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAEO,YAAY,CAAC,KAAU;QAE9B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC9B,OAAO,KAAK,CAAC;SACb;QAID,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QAG7D,MAAM,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;QAGzC,IAAI,KAAK,CAAC,WAAW,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SACzC;QAED,OAAO,WAAW,CAAC;IACpB,CAAC;CACD;AA1ED,sCA0EC;AAyDY,QAAA,4BAA4B,GAAgC,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAGrG,QAAA,yBAAyB,GAA6B,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC","sourcesContent":["\nexport class CourseSection {\n\tprivate uuid: string;\n\tprivate id: string;\n\tprivate title: string;\n\tprivate instructor: string;\n\tprivate dept: string;\n\tprivate avg: number;\n\tprivate pass: number;\n\tprivate fail: number;\n\tprivate audit: number;\n\tprivate year: number;\n\n\t//  validate here\n\t//\tcheck specifications\n\t//\tcast year as a number\n\t//\thelper functions for consistent cases i.e always string, always number\n\tconstructor(\n\t\tuuid: string,\n\t\tid: string,\n\t\ttitle: string,\n\t\tinstructor: string,\n\t\tdept: string,\n\t\tavg: number,\n\t\tpass: number,\n\t\tfail: number,\n\t\taudit: number,\n\t\tyear: number,\n\t) {\n\t\tthis.uuid = this.alwaysString(uuid);\n\t\tthis.id = this.alwaysString(id);\n\t\tthis.title = this.alwaysString(title);\n\t\tthis.instructor = this.alwaysString(instructor);\n\t\tthis.dept = this.alwaysString(dept);\n\t\tthis.avg = this.alwaysNumber(avg);\n\t\tthis.pass = this.alwaysNumber(pass);\n\t\tthis.fail = this.alwaysNumber(fail);\n\t\tthis.audit = this.alwaysNumber(audit);\n\t\tthis.year = this.alwaysNumber(year);\n\t}\n\n\t//\tvalidate differently, dont cast just return\n\t// private alwaysString(value: any): string{\n\t// \tif(typeof value !== \"string\"){\n\t// \t\treturn String(value);\n\t// \t}\n\t// \treturn value;\n\t// }\n\tprivate alwaysString(value: any): string{\n\t\tif(typeof value !== \"string\"){\n\t\t\treturn String(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate alwaysNumber(value: any): number {\n\t\t// First, check if it's already a valid number.\n\t\tif (typeof value === \"number\") {\n\t\t\treturn value;\n\t\t}\n\n\t\t// If it's not a number, we assume it's a string and try to clean it up.\n\t\t// This regex removes any characters that are not digits, decimal points, or minus signs.\n\t\tconst cleanedValue = String(value).replace(/[^0-9.-]+/g, \"\");\n\n\t\t// Now try to convert the cleaned string to a number.\n\t\tconst numberValue = Number(cleanedValue);\n\n\t\t// Check if the resulting number is actually a number and not NaN.\n\t\tif (isNaN(numberValue)) {\n\t\t\tthrow new Error(\"Cannot cast to number\");\n\t\t}\n\n\t\treturn numberValue;\n\t}\n}\n\nexport interface SectionRaw {\n\ttier_eighty_five: number;\n\ttier_ninety:      number;\n\tTitle:            string;\n\tSection:          string;\n\tDetail:           string;\n\ttier_seventy_two: number;\n\tOther:            number;\n\tLow:              number;\n\ttier_sixty_four:  number;\n\tid:               number;\n\ttier_sixty_eight: number;\n\ttier_zero:        number;\n\ttier_seventy_six: number;\n\ttier_thirty:      number;\n\ttier_fifty:       number;\n\tProfessor:        string;\n\tAudit:            number;\n\ttier_g_fifty:     number;\n\ttier_forty:       number;\n\tWithdrew:         number;\n\tYear:             string;\n\ttier_twenty:      number;\n\tStddev:           number;\n\tEnrolled:         number;\n\ttier_fifty_five:  number;\n\ttier_eighty:      number;\n\ttier_sixty:       number;\n\ttier_ten:         number;\n\tHigh:             number;\n\tCourse:           string;\n\tSession:          string;\n\tPass:             number;\n\tFail:             number;\n\tAvg:              number;\n\tCampus:           string;\n\tSubject:          string;\n}\n\nexport interface SectionQuery {\n\tuuid: string;\n\tid: string;\n\ttitle: string;\n\tinstructor: string;\n\tdept: string;\n\tavg: number;\n\tpass: number;\n\tfail: number;\n\taudit: number;\n\tyear: number;\n}\n\nexport type SectionQueryKeys = keyof SectionQuery;\n\nexport type SectionQueryNumericalKeys = \"avg\" | \"pass\" | \"fail\" | \"audit\" | \"year\";\nexport const SectionQueryNumericalKeyList: SectionQueryNumericalKeys[] = [\"avg\", \"pass\", \"fail\", \"audit\", \"year\"];\n\nexport type SectionQueryStringKeys = \"uuid\" | \"id\" | \"title\" | \"instructor\" | \"dept\";\nexport const SectionQueryStringKeyList: SectionQueryStringKeys[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6892c52a9187068d2704c831c1be5a1e5a1f9035","contentHash":"abb1cadd7799d584c7f98ab1ee7de20dfd66431608f9d3e6a9584b35ffcdc82a"},"/Users/zaidattar/IdeaProjects/project_team134/src/service/DatasetProcessor.ts":{"path":"/Users/zaidattar/IdeaProjects/project_team134/src/service/DatasetProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":49}},"5":{"start":{"line":8,"column":24},"end":{"line":8,"column":57}},"6":{"start":{"line":9,"column":18},"end":{"line":9,"column":45}},"7":{"start":{"line":10,"column":19},"end":{"line":10,"column":55}},"8":{"start":{"line":11,"column":25},"end":{"line":11,"column":64}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":42}},"10":{"start":{"line":15,"column":8},"end":{"line":41,"column":9}},"11":{"start":{"line":16,"column":24},"end":{"line":16,"column":45}},"12":{"start":{"line":17,"column":25},"end":{"line":17,"column":71}},"13":{"start":{"line":18,"column":34},"end":{"line":18,"column":56}},"14":{"start":{"line":19,"column":12},"end":{"line":21,"column":13}},"15":{"start":{"line":20,"column":16},"end":{"line":20,"column":72}},"16":{"start":{"line":22,"column":28},"end":{"line":22,"column":59}},"17":{"start":{"line":23,"column":33},"end":{"line":23,"column":35}},"18":{"start":{"line":24,"column":12},"end":{"line":27,"column":15}},"19":{"start":{"line":25,"column":36},"end":{"line":25,"column":67}},"20":{"start":{"line":26,"column":16},"end":{"line":26,"column":47}},"21":{"start":{"line":28,"column":12},"end":{"line":28,"column":44}},"22":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"23":{"start":{"line":30,"column":16},"end":{"line":30,"column":98}},"24":{"start":{"line":32,"column":12},"end":{"line":32,"column":57}},"25":{"start":{"line":33,"column":35},"end":{"line":33,"column":67}},"26":{"start":{"line":34,"column":32},"end":{"line":34,"column":51}},"27":{"start":{"line":35,"column":12},"end":{"line":35,"column":76}},"28":{"start":{"line":36,"column":12},"end":{"line":36,"column":33}},"29":{"start":{"line":37,"column":12},"end":{"line":37,"column":27}},"30":{"start":{"line":40,"column":12},"end":{"line":40,"column":87}},"31":{"start":{"line":44,"column":28},"end":{"line":44,"column":54}},"32":{"start":{"line":45,"column":8},"end":{"line":66,"column":9}},"33":{"start":{"line":46,"column":29},"end":{"line":46,"column":52}},"34":{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},"35":{"start":{"line":48,"column":16},"end":{"line":48,"column":23}},"36":{"start":{"line":50,"column":12},"end":{"line":61,"column":15}},"37":{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},"38":{"start":{"line":52,"column":20},"end":{"line":52,"column":44}},"39":{"start":{"line":54,"column":16},"end":{"line":60,"column":17}},"40":{"start":{"line":55,"column":36},"end":{"line":55,"column":254}},"41":{"start":{"line":56,"column":20},"end":{"line":56,"column":48}},"42":{"start":{"line":59,"column":20},"end":{"line":59,"column":72}},"43":{"start":{"line":64,"column":12},"end":{"line":64,"column":70}},"44":{"start":{"line":65,"column":12},"end":{"line":65,"column":19}},"45":{"start":{"line":69,"column":26},"end":{"line":69,"column":115}},"46":{"start":{"line":70,"column":8},"end":{"line":70,"column":97}},"47":{"start":{"line":70,"column":42},"end":{"line":70,"column":95}},"48":{"start":{"line":70,"column":67},"end":{"line":70,"column":94}},"49":{"start":{"line":73,"column":0},"end":{"line":73,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":51},"end":{"line":42,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":34},"end":{"line":24,"column":35}},"loc":{"start":{"line":24,"column":58},"end":{"line":27,"column":13}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":44},"end":{"line":67,"column":5}},"line":43},"4":{"name":"(anonymous_4)","decl":{"start":{"line":50,"column":36},"end":{"line":50,"column":37}},"loc":{"start":{"line":50,"column":53},"end":{"line":61,"column":13}},"line":50},"5":{"name":"(anonymous_5)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":37},"end":{"line":71,"column":5}},"line":68},"6":{"name":"(anonymous_6)","decl":{"start":{"line":70,"column":29},"end":{"line":70,"column":30}},"loc":{"start":{"line":70,"column":42},"end":{"line":70,"column":95}},"line":70},"7":{"name":"(anonymous_7)","decl":{"start":{"line":70,"column":58},"end":{"line":70,"column":59}},"loc":{"start":{"line":70,"column":67},"end":{"line":70,"column":94}},"line":70}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":19,"column":12},"end":{"line":21,"column":13}},"type":"if","locations":[{"start":{"line":19,"column":12},"end":{"line":21,"column":13}},{"start":{"line":19,"column":12},"end":{"line":21,"column":13}}],"line":19},"4":{"loc":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},{"start":{"line":29,"column":12},"end":{"line":31,"column":13}}],"line":29},"5":{"loc":{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},"type":"if","locations":[{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},{"start":{"line":47,"column":12},"end":{"line":49,"column":13}}],"line":47},"6":{"loc":{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},"type":"if","locations":[{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},{"start":{"line":51,"column":16},"end":{"line":53,"column":17}}],"line":51}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":25,"10":25,"11":25,"12":25,"13":20,"14":20,"15":0,"16":20,"17":20,"18":20,"19":65391,"20":65391,"21":20,"22":20,"23":9,"24":11,"25":11,"26":11,"27":11,"28":11,"29":11,"30":14,"31":65391,"32":65391,"33":65391,"34":65389,"35":25907,"36":39479,"37":710732,"38":0,"39":710732,"40":710732,"41":710732,"42":0,"43":5,"44":5,"45":65389,"46":65389,"47":39481,"48":394792,"49":1},"f":{"0":2,"1":25,"2":65391,"3":65391,"4":710732,"5":65389,"6":39481,"7":394792},"b":{"0":[1,1,1],"1":[0,2],"2":[2,2],"3":[0,20],"4":[9,11],"5":[25907,39479],"6":[0,710732]},"inputSourceMap":{"version":3,"file":"/Users/zaidattar/IdeaProjects/project_team134/src/service/DatasetProcessor.ts","sources":["/Users/zaidattar/IdeaProjects/project_team134/src/service/DatasetProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import JSZip from \"jszip\";\nimport {CourseSection} from \"../model/CourseSection\";\nimport {Dataset} from \"../model/Dataset\";\nimport fs from \"fs-extra\";\nimport {InsightDatasetKind, InsightError} from \"../controller/IInsightFacade\";\n\n\n//\tTA feedback:\n//\tDataset has an array of CourseSections\n//\tAlso has a function addSection --> is this how I save the dataset locally? as in after parsing?\n//\tAfter implementing this file, do I create an instance of this class in InsightFacade?\n//\tNeed to check for duplicate ids and kind\n//\tAbstract class and make methods static in TS\n//\texport abstract class Dataprocessor\n//\tpublic static methods\n\n\nexport abstract class DatasetProcessor{\n\t// public static async ProcessDataset(id: string, content: string, kind: InsightDatasetKind): Promise<Dataset> {\n\t// \tconsole.log(\"attempting to load\");\n\t// \ttry {\n\t// \t\tconst zip = await JSZip.loadAsync(content, {base64: true});\n\t// \t\tconst coursesFolder = zip.folder(\"courses\");\n\t// \t\tif (!coursesFolder || Object.keys(coursesFolder.files).length === 0) {\n\t// \t\t\tthrow new InsightError(\"Invalid Data: No courses directory or it is empty\");\n\t// \t\t}\n\t//\n\t// \t\tconst dataset = new Dataset(id, kind);\n\t// \t\tconst filePromises = [];\n\t// \t\tfor (let relativePath in coursesFolder.files) {\n\t// \t\t\tlet file = coursesFolder.files[relativePath];\n\t// \t\t\tfilePromises.push(this.processFile(file, dataset));\n\t// \t\t}\n\t// \t\tawait Promise.all(filePromises);\n\t// \t\tconsole.log(\"awaited promises\");\n\t// \t\tif (dataset.getSections().length === 0) {\n\t// \t\t\tthrow new InsightError(\"No valid sections found in the dataset\");\n\t// \t\t}\n\t// \t\t//  save this dataset as a JSON file to save it back without checks and validations\n\t// \t\t//\tsave one file per dataset\n\t// \t\t//\ttry to take this dataset object, convert the section file into JSON and then save the whole dataset\n\t// \t\tawait fs.ensureDir(\"./data\");\n\t// \t\tconst datasetJsonStr = JSON.stringify(dataset,null,4);\n\t// \t\tconst datasetPath = `./data/${id}.json`;\n\t// \t\tawait fs.writeFile(datasetPath,datasetJsonStr);\n\t// \t\treturn dataset;\n\t// \t} catch (error) {\n\t// \t\tthrow new InsightError(`Error loading dataset: ${error}`);\n\t// \t}\n\t// }\n\n\tpublic static async ProcessDataset(id: string, content: string, kind: InsightDatasetKind): Promise<Dataset> {\n\t\tconsole.log(\"attempting to load\");\n\t\ttry {\n\t\t\tconst zip = new JSZip();\n\t\t\tconst data = await zip.loadAsync(content, {base64: true});\n\t\t\tconst coursesFolder = data.folder(\"courses\");\n\t\t\tif (!coursesFolder) {\n\t\t\t\tthrow new InsightError(\"Invalid Data\");\n\t\t\t}\n\t\t\tconst dataset = new Dataset(id, kind);\n\t\t\tconst filePromises: any[] = [];\n\t\t\tcoursesFolder.forEach((relativePath, file) => {\n\t\t\t\tconst filePromise = this.processFile(file, dataset);\n\t\t\t\tfilePromises.push(filePromise);\n\t\t\t});\n\t\t\tawait Promise.all(filePromises);\n\t\t\tif (dataset.getSections().length === 0) {\n\t\t\t\tthrow new InsightError(\"No valid sections found in the dataset\");\n\t\t\t}\n\t\t\t//\tconvert JS object into JSON object, and save that representation to disk\n\t\t\t//  save this dataset as a JSON file to save it back without checks and validations\n\t\t\t//\tsave one file per dataset\n\t\t\t//\ttry to take this dataset object, convert the section file into JSON and then save the whole dataset\n\t\t\tawait fs.ensureDir(\"./data\");\n\t\t\tconst datasetJsonStr = JSON.stringify(dataset,null,4);\n\t\t\tconst datasetPath = `./data/${id}.json`;\n\t\t\tawait fs.writeFile(datasetPath,datasetJsonStr);\n\t\t\tconsole.log(\"saved\");\n\t\t\treturn dataset;\n\t\t} catch (error) {\n\t\t\tthrow new InsightError(`Error loading dataset: ${error}`);\n\t\t}\n\t}\n\n\tpublic static async processFile(file: JSZip.JSZipObject, dataset: Dataset): Promise<void> {\n\t\tconst fileContent = await file.async(\"string\");\n\t\ttry {\n\t\t\tconst jsonData = JSON.parse(fileContent);\n\t\t\t//\tcheck if there is at least one valid section in file\n\t\t\tif (!this.hasValidSection(jsonData.result)) {\n\t\t\t\treturn; // Skip this file as it doesn't contain any valid section\n\t\t\t}\n\t\t\tjsonData.result.forEach((sectionData: any) => {\n\t\t\t\tif (sectionData.section === \"overall\") {\n\t\t\t\t\tsectionData.year = 1900;\n\t\t\t\t}\n\t\t\t\ttry{\n\t\t\t\t\tconst section = new CourseSection(\n\t\t\t\t\t\tsectionData.uuid,\n\t\t\t\t\t\tsectionData.id,\n\t\t\t\t\t\tsectionData.title,\n\t\t\t\t\t\tsectionData.instructor,\n\t\t\t\t\t\tsectionData.dept,\n\t\t\t\t\t\tsectionData.avg,\n\t\t\t\t\t\tsectionData.pass,\n\t\t\t\t\t\tsectionData.fail,\n\t\t\t\t\t\tsectionData.audit,\n\t\t\t\t\t\tsectionData.year,\n\t\t\t\t\t);\n\t\t\t\t\tdataset.addSection(section);\n\t\t\t\t} catch(e){\n\t\t\t\t\tconsole.error(`Invalid section data in file: ${e}`);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error(`Error parsing file content to JSON: ${e}`);\n\t\t\treturn;\n\t\t\t// return Promise.reject(new InsightError(\"Not a JSON file\"));\n\t\t}\n\t}\n\n\tprivate static hasValidSection(sections: any[]): boolean {\n\t\tconst validKeys = [\"id\",\"Course\", \"Title\", \"Professor\", \"Subject\", \"Avg\", \"Pass\", \"Fail\", \"Audit\", \"Year\"];\n\t\t// Check if at least one section has all valid keys\n\t\treturn sections.some((section) =>\n\t\t\tvalidKeys.every((key) => Object.hasOwn(section,key))\n\t\t);\n\t}\n\n\n\t// private static hasValidSection(sections: any[]): boolean {\n\t// \tconst validKeys = [\"uuid\", \"id\", \"Title\", \"Instructor\", \"Dept\", \"Avg\", \"Pass\", \"Fail\", \"Audit\", \"Year\"];\n\t// \treturn sections.includes(validKeys);\n\t// }\n\n\t// public static async ProcessDataset(id: string, content: string, kind: InsightDatasetKind): Promise<Dataset> {\n\t// \tconsole.log(\"Attempting to load dataset\");\n\t// \ttry {\n\t// \t\tconst zip = await JSZip.loadAsync(content, {base64: true});\n\t// \t\tconst coursesFolder = zip.folder(\"courses\");\n\t// \t\tif (!coursesFolder || Object.keys(coursesFolder.files).length === 0) {\n\t// \t\t\tthrow new InsightError(\"Invalid Data: No courses directory or it is empty\");\n\t// \t\t}\n\t//\n\t// \t\tconst dataset = new Dataset(id, kind);\n\t// \t\tconst filePromises: Array<Promise<void>> = [];\n\t//\n\t// \t\tObject.keys(coursesFolder.files).forEach((relativePath) => {\n\t// \t\t\tconsole.log(relativePath);\n\t// \t\t\tif (!relativePath.endsWith(\".json\")) {\n\t// \t\t\t\tconsole.log(\"not json\");\n\t// \t\t\t\treturn;\n\t// \t\t\t} // Skip non-JSON files\n\t//\n\t// \t\t\tconsole.log(\"Processing JSON file:\", relativePath);\n\t// \t\t\tconst file = coursesFolder.files[relativePath];\n\t// \t\t\tconst filePromise = file.async(\"string\").then((fileContent) => {\n\t// \t\t\t\treturn DatasetProcessor.processFile(fileContent, dataset); // Ensure you are calling it correctly\n\t// \t\t\t});\n\t// \t\t\tfilePromises.push(filePromise);\n\t// \t\t});\n\t//\n\t// \t\tawait Promise.all(filePromises);\n\t//\n\t// \t\tif (dataset.getSections().length === 0) {\n\t// \t\t\tthrow new InsightError(\"No valid sections found in the dataset\");\n\t// \t\t}\n\t//\n\t// \t\tconsole.log(\"Saving dataset to disk\");\n\t// \t\tawait fs.ensureDir(\"./data\");\n\t// \t\tconst datasetJsonStr = JSON.stringify(dataset, null, 4);\n\t// \t\tawait fs.writeFile(`./data/${id}.json`, datasetJsonStr);\n\t//\n\t// \t\treturn dataset;\n\t// \t} catch (error) {\n\t// \t\tthrow new InsightError(`Error processing dataset: ${error}`);\n\t// \t}\n\t// }\n\t//\n\t// public static async processFile(fileContent: string, dataset: Dataset): Promise<void> {\n\t// \ttry {\n\t// \t\t// Parse the JSON content of the file\n\t// \t\tconst jsonData = JSON.parse(fileContent);\n\t//\n\t// \t\t// Iterate over each section in the result array\n\t// \t\tjsonData.result.forEach((sectionData: any) => {\n\t// \t\t\t// Handle the case where section is \"overall\" and year needs to be set to 1900\n\t// \t\t\tif (sectionData.Section === \"overall\") {\n\t// \t\t\t\tsectionData.Year = 1900;\n\t// \t\t\t}\n\t//\n\t// \t\t\t// Create a new CourseSection instance\n\t// \t\t\ttry {\n\t// \t\t\t\tconst section = new CourseSection(\n\t// \t\t\t\t\tsectionData.uuid,\n\t// \t\t\t\t\tdataset.getID(), // Assuming id is the dataset ID and not sectionData.id\n\t// \t\t\t\t\tsectionData.Title,\n\t// \t\t\t\t\tsectionData.Instructor,\n\t// \t\t\t\t\tsectionData.Subject, // Assuming dept maps to Subject\n\t// \t\t\t\t\tsectionData.Avg,\n\t// \t\t\t\t\tsectionData.Pass,\n\t// \t\t\t\t\tsectionData.Fail,\n\t// \t\t\t\t\tsectionData.Audit,\n\t// \t\t\t\t\tparseInt(sectionData.Year, 10), // Ensuring Year is treated as a number\n\t// \t\t\t\t);\n\t// \t\t\t\t// Add the section to the dataset\n\t// \t\t\t\tdataset.addSection(section);\n\t// \t\t\t} catch (error) {\n\t// \t\t\t\tconsole.error(`Error creating CourseSection from data: ${error}`);\n\t// \t\t\t}\n\t// \t\t});\n\t// \t} catch (error) {\n\t// \t\tconsole.error(`Error parsing file content to JSON: ${error}`);\n\t// \t}\n\t// }\n\n\n\t//\tProcess all files in the zip\n\t// private async Parse(zip: JSZip, dataset: Dataset): Promise<void> {\n\t// \tconst promises = Object.keys(zip.files)\n\t// \t\t.filter((relativePath) => relativePath.endsWith(\".json\"))\n\t// \t\t.map(async (relativePath) => {\n\t// \t\t\tconst fileContent = await zip.file(relativePath)!.async(\"string\");\n\t// \t\t\ttry {\n\t// \t\t\t\tconst courseData = JSON.parse(fileContent);\n\t// \t\t\t\tcourseData.result.forEach((sectionData: any) => {\n\t// \t\t\t\t\tif (this.isValidSection(sectionData)) {\n\t// \t\t\t\t\t\tconst section = new CourseSection(\n\t// \t\t\t\t\t\t\tsectionData.uuid,\n\t// \t\t\t\t\t\t\tsectionData.id,\n\t// \t\t\t\t\t\t\tsectionData.title,\n\t// \t\t\t\t\t\t\tsectionData.instructor,\n\t// \t\t\t\t\t\t\tsectionData.dept,\n\t// \t\t\t\t\t\t\tsectionData.avg,\n\t// \t\t\t\t\t\t\tsectionData.pass,\n\t// \t\t\t\t\t\t\tsectionData.fail,\n\t// \t\t\t\t\t\t\tsectionData.audit,\n\t// \t\t\t\t\t\t\tsectionData.year\n\t// \t\t\t\t\t\t);\n\t// \t\t\t\t\t\tdataset.addSection(section);\n\t// \t\t\t\t\t}\n\t// \t\t\t\t});\n\t// \t\t\t} catch (error) {\n\t// \t\t\t\tconsole.error(`Error processing file ${relativePath}: ${error}`);\n\t// \t\t\t}\n\t// \t\t});\n\t//\n\t// \tawait Promise.all(promises); //\twaits until all JSON files have been processed\n\t// }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c83b50389b32841f852bcc89bddf6a6380d557de","contentHash":"07df417d51b52c829391193bebe169b15a0c8e4454cc8066cd37a3f8c2979994"}}